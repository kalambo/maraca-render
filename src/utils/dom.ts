import { createNode, getSetters, getValues, update } from './index';

const tags = [
  'a',
  'br',
  'div',
  'em',
  'h1',
  'h2',
  'h3',
  'h4',
  'h5',
  'h6',
  'hr',
  'img',
  'li',
  'ol',
  'p',
  'pre',
  'span',
  'strong',
  'table',
  'tbody',
  'td',
  'th',
  'thead',
  'tr',
  'ul',
];
const voidTags = ['br', 'hr', 'img', 'input'];

const valuesConfig = {
  style: {
    background: 'string',
    backgroundAttachment: 'string',
    backgroundClip: 'string',
    backgroundColor: 'string',
    backgroundImage: 'string',
    backgroundOrigin: 'string',
    backgroundPosition: 'string',
    backgroundRepeat: 'string',
    backgroundSize: 'string',
    border: 'string',
    borderBottom: 'string',
    borderBottomColor: 'string',
    borderBottomLeftRadius: 'string',
    borderBottomRightRadius: 'string',
    borderBottomStyle: 'string',
    borderBottomWidth: 'string',
    borderColor: 'string',
    borderLeft: 'string',
    borderLeftColor: 'string',
    borderLeftStyle: 'string',
    borderLeftWidth: 'string',
    borderRadius: 'string',
    borderRight: 'string',
    borderRightColor: 'string',
    borderRightStyle: 'string',
    borderRightWidth: 'string',
    borderStyle: 'string',
    borderTop: 'string',
    borderTopColor: 'string',
    borderTopLeftRadius: 'string',
    borderTopRightRadius: 'string',
    borderTopStyle: 'string',
    borderTopWidth: 'string',
    borderWidth: 'string',
    boxSizing: 'string',
    clear: 'string',
    color: 'string',
    cursor: 'string',
    display: 'string',
    float: 'string',
    font: 'string',
    fontFamily: 'string',
    fontSize: 'string',
    fontStyle: 'string',
    fontVariant: 'string',
    fontWeight: 'string',
    height: 'string',
    left: 'string',
    letterSpacing: 'string',
    lineHeight: 'string',
    margin: 'string',
    marginBottom: 'string',
    marginLeft: 'string',
    marginRight: 'string',
    marginTop: 'string',
    overflow: 'string',
    padding: 'string',
    paddingBottom: 'string',
    paddingLeft: 'string',
    paddingRight: 'string',
    paddingTop: 'string',
    position: 'string',
    textAlign: 'string',
    top: 'string',
    verticalAlign: 'string',
    width: 'string',
    zIndex: 'string',
  },
};

export default tags.reduce<any>(
  (res, tag) => ({
    ...res,
    [tag]: (node, values, indices, next) => {
      const result = node || createNode(tag);
      if (!voidTags.includes(tag)) update.children(result, indices, next);
      update.props(
        result,
        getValues(values, valuesConfig),
        getSetters(values, {}),
      );
      return result;
    },
  }),
  {},
);
